[
  {
    "input": "A simple drawing program in only 14 lines",
    "output": "Dim drawing As Integer\nDo\n    If _MouseButton(1) Then\n        If Not drawing Then\n            PSet (_MouseX, _MouseY)\n            drawing = -1\n        Else\n            Line -(_MouseX, _MouseY)\n        End If\n    Else \n        drawing = 0\n    End If\n    _Limit 30\nLoop"
  },
  {
    "input": "Fractal Fern",
    "output": "Screen 12\nRandomize Timer\nColor _RGB(Rnd * 255, Rnd * 255, Rnd * 255)\nDim As Single X, Y, xx, yy\nDim as Integer n, i\nFor i = 1 TO 100000\n    n = RND * 100\n    If n < 1 Then\n        Xp = 0\n        Yp = .16 * Y\n    ElseIf n >= 1 And n <= 8 Then\n        Xp = .2 * X - .26 * Y\n        Yp = .23 * X + .22 * Y + 1.6\n    ElseIf n >= 8 And n <= 15 Then\n        Xp = -.15 * X + .28 * Y\n        Yp = .26 * X + .24 * Y + .44\n    Else\n        Xp = .85 * X + .04 * Y\n        Yp = -.04 * X + .85 * Y + 1.6\n    End If\n    X = Xp\n    Y = Yp\n    xx = X * 45\n    yy = Y * 45 - 225\n    PSet (xx + 320, -yy + 240)\nNext i"
  },
  {
    "input": "Rotating Lorenz Attractor",
    "output": "Screen _NewImage(640, 480, 32)\nDim As Double p, s, b, h, x, y, z, i, rot\np = 28\ns = 10\nb = 8 / 3\nh = 0.01\n\nDo\n    Cls\n    rot = rot + 0.01\n    x = 0.3\n    y = 0.3\n    z = 0.456\n    xx = x * Cos(rot) - y * Sin(rot)\n    yy = x * Sin(rot) + y * Cos(rot)\n            \n    PreSet (_Width / 2 + 35 * xx * 700 / (yy + 2500), _Height - 35 * z * 700 / (yy + 2500)), _RGB(255, 255, 0)\n    For i = 0 To 14000\n        x = x + h * s * (y - x)\n        y = y + h * (x * (p - z) - y)\n        z = z + h * (x * y - b * z)\n        xx = x * Cos(rot) - y * Sin(rot)\n        yy = x * Sin(rot) + y * Cos(rot)\n        Line -(_Width / 2 + 35 * xx * 700 / (yy + 2500), _Height - 35 * z * 700 / (yy + 2500)), _RGB(255, 255, 0)\n    Next\n\n    _Limit 60\nLoop"
  },
  {
    "input": "Bubble Universe",
    "output": "Const xmax = 512, ymax = 512\n_Title \"Bubble Universe - ESC to exit\" ' from johnno at RCBasic forum 2022-11-14\nScreen _NewImage(xmax, ymax, 32)\n' ---------------\n' Paul Dunn posted this code but for SpecBAS in a facebook group.\n' It looked so cool that I had to  rewrite it in Naalaa 7. Marcus\n'\n' bplus QB64 Mod of RCB version by Johnno56\nTAU = 6.283185307179586\nn = 200\nr = TAU / 235\nx = 0\ny = 0\nv = 0\nt = 0\nhw = xmax / 2\nhh = ymax / 2\nDo\n    Color _RGB32(0, 0, 0)\n    Cls\n    For i = 0 To n\n        For j = 0 To n\n            u = Sin(i + v) + Sin(r * i + x)\n            v = Cos(i + v) + Cos(r * i + x)\n            x = u + t\n            Color _RGB(i, j, 99)\n            PSet (hw + u * hw * 0.4, hh + v * hh * 0.4)\n        Next\n    Next\n    t = t + 0.001 ' slowed way way down from .025\n    _Display\n    _Limit 30\nLoop Until _KeyDown(27)\n"
  },
  {
    "input": "Deep Field",
    "output": "' Converted to QBJS from specbas sample by ZXDunny\n' PROG demos:graphics/deep field\n' REM Deep Field by P Malin\nRANDOMIZE TIMER\nDIM G, t1, q1, u1, v1, A, R, Q, a1, M, C, i1, S, T, D, Z, x1, U, clr\nDIM pal()\n'SCREEN _NEWIMAGE(1280, 768)\nSCREEN _NEWIMAGE(_RESIZEWIDTH-5, _RESIZEHEIGHT-5)\nDIM points(_WIDTH, _HEIGHT)\nCLS\npal(1) = &HFFFF0000: pal(2) = &HFFFF8000: pal(3) = &HFFFFFF00: pal(4) = &HFFFFFF80: pal(5) = &HFFFFFFFF\nFOR G = -64 TO 800\n    t1=RND*99: q1=RND*99\n    u1=RND*_WIDTH: v1=RND*_HEIGHT\n    A=RND*3: R=90/(1+RND*200): Q=1+R*(.5+RND/2)\n    a1=1+3*RND^2: M=1: C=(1+3*RND^2)*R*R\n    IF RND*9<4 THEN\n        Q=R: t1=0: q1=0: A=0: M=_PI/3: a1=1\n     END IF\n     FOR i1 = 0 TO C\n         S=-LOG(RND): T=i1*M: U=S*R*SIN(T): V=S*Q*COS(T)\n         T=S*A: X=U*COS(T)+V*SIN(T): Y=V*COS(T)-U*SIN(T)\n         D=(X*X+Y*Y)/(R*R+Q*Q): Z=99*((2.7^-D)+.1)\n         Z=Z*(RND-.5)^3: y1=Y*COS(t1)+Z*SIN(t1): Z=Z*COS(t1)-Y*SIN(t1)\n         x1=u1+X*COS(q1)+y1*SIN(q1): y1=v1-X*SIN(q1)+y1*COS(q1)\n         x1p = _ROUND(x1): y1p = _ROUND(y1)\n         clr = _ROUND(min(5, max(0, points(x1p,y1p)) + a1))\n         PSET (x1p, y1p), pal(clr) \n         points(x1p, y1p) = clr\n    NEXT i1\nNEXT G\n\nFUNCTION MIN(var1, var2)\n    IF var1 < var2 THEN MIN = var1 ELSE MIN = var2\nEND FUNCTION\n\nFUNCTION MAX(var1, var2)\n    IF var1 > var2 THEN MAX = var1 ELSE MAX = var2\nEND FUNCTION"
  },
  {
    "input": "Spinning Spiral Wheel",
    "output": "'Dav, SEP/2023\n\nScreen _NewImage(800, 600, 32)\n\nDim points, i, a, b, clr&, w 'for qbjs to use\n\n'generate starting values\npoints = 9 + Int(Rnd * 10) 'num of points to use\nReDim px(points), py(points) 'x/y pos of points\nclr& = _RGB(Rnd * 255, Rnd * 255, Rnd * 255) 'make random color\n\nDo\n    Cls\n    'compute x/y pos\n    For i = 0 To points\n        px(i) = (_Width / 2) + (Sin((Timer * .5) * (i / points)) * _Height / 2)\n        py(i) = (_Height / 2) + (Cos((Timer * .5) * (i / points)) * _Height / 2)\n    Next\n\n    'do the points\n    For a = 0 To points\n        For b = 0 To points\n            Line (px(a), py(a))-(px(b), py(b)), clr&\n            For w = 1 To (points / 2) Step .36\n                Circle (px(a), py(a)), w, clr&\n            Next\n        Next\n    Next\n\n    Locate 1, 1: Print \"ENTER for new wheel\";\n    Locate 2, 1: Print points; \" points\";\n\n    _Limit 60\n    _Display\n\n    If InKey$ <> \"\" Then\n        points = 9 + Int(Rnd * 10) 'num of points to use\n        ReDim px(points), py(points) 'x/y pos of points\n        clr& = _RGB(Rnd * 255, Rnd * 255, Rnd * 255) 'random color\n    End If\n    \nLoop Until _KeyHit = 27\n\n\n"
  },
  {
    "input": "Particle Fountain",
    "output": "'Option _Explicit\n_Title \"Particle Fountain\"\nConst nP = 30000\nType particle\n    x As Single\n    y As Single\n    dx As Single\n    dy As Single\n    r As Single\n    c As _Unsigned Long\nEnd Type\nDim Shared p(nP) As particle\nScreen _NewImage(800, 600, 32)\nDim As Long i, lp\nFor i = 0 To nP\n    new i\nNext\nDo\n    Cls\n    If lp < nP Then\n        lp = lp + 10\n    End If\n    For i = 0 To lp\n        p(i).dy = p(i).dy + .1\n        p(i).x = p(i).x + p(i).dx\n        p(i).y = p(i).y + p(i).dy\n        If p(i).x < 0 Or p(i).x > _Width Then\n            new i\n        End If\n        If p(i).y > _Height And p(i).dy > 0 Then\n            p(i).dy = -.75 * p(i).dy\n            p(i).y = _Height - 5\n        End If\n        'Circle (p(i).x, p(i).y), p(i).r, p(i).c\n        PSet (p(i).x, p(i).y), p(i).c\n    Next\n    _Limit 100\nLoop\n\nSub new (i)\n    p(i).x = _Width / 2 + Rnd * 20 - 10\n    p(i).y = _Height + Rnd * 5\n    p(i).dx = Rnd * 1 - .5\n    p(i).dy = -10\n    p(i).r = Rnd * 3\n    p(i).c = _RGB32(100 * Rnd + 155, 100 * Rnd + 155, 200 + Rnd * 55)\nEnd Sub\n\n"
  },
  {
    "input": "Fun with Sin Waves",
    "output": "dim w, h, pi\npi = 4*atn(1)\nw = 640\nh = 480\nscreen _newimage(w, h, 32)\ndim i, t, x, y\nt = 0\ndo\n    t = t+0.1\n    cls\n    for i=1 to 4\n        for x=0 to w\n            y = 100*sin(pi*x/w)*sin(3*pi*x/w + t + i*t*pi*0.01)\n            pset (x, h/2 - y)\n        next\n    next\n    _limit 60\nloop"
  },
  {
    "input": "Fullscreen Example",
    "output": "If Not _FullScreen Then _FullScreen\n\nPrint \"This is a fullscreen test\"\nPrint \"It only works if your browser supports it\"\nPrint\nPrint \"Click anywhere to draw a circle\"\nPrint \"Press any key to quit\"\n\n\nCircle (200, 200), 100, 10\nPaint (200, 200), 1, 10\n\nDim drawing As Integer\ndrawing = 0\n\nWhile Not _KeyHIt\n    If _MouseButton(1) Then\n        If Not drawing Then\n            drawing = -1\n            Circle (_MouseX, _MouseY), Rnd * 30 + 10, Rnd * 14 + 1\n        End If\n    Else\n        drawing = 0\n        End If\n    _Limit 30\nWend\n\nIf _FullScreen Then\n    Locate 24, 1\n    Print \"Press any key to exit fullscreen\"\n    Sleep\n    _FullScreen _OFF\nEnd If"
  },
  {
    "input": "Lunar Lander Game",
    "output": "Screen _NewImage(800, 640, 32) ' b+ Lander 30 LOC (double parking cheat) 2020-11-13\nDim gi&, kh&, h, dx, x, y\ngi& = _NewImage(800, 640, 32)\nReDim g(-100 To 200)\nDo\n    Cls: _KeyClear\n    h = 30: dx = 1: x = 3: y = 2\n    For i = -10 To 110\n        If Rnd < .5 Then h = h + Int(Rnd * 3) - 1 Else h = h\n        If h > 39 Then h = 39\n        If h < 25 Then h = 25\n        Line (i * 8, h * 16)-(i * 8 + 8, _Height), _RGB32(128), BF\n        g(i) = h\n        _PutImage , 0, gi&\n    Next\n    While 1\n        _PutImage , gi&, 0\n        Circle (x * 8 + 4, y * 16 + 8), 4, &HFF00FFFF\n        Circle (x * 8, y * 16 + 16), 4, &HFFFFFF00, 0, _Pi\n        Circle (x * 8 + 8, y * 16 + 16), 4, &HFFFFFF00, 0, _Pi\n        If y >= g(x - 1) Or y >= g(x + 1) Or y >= g(x) Or y >= 40 Or x < -5 Or x > 105 Then _PrintString (46 * 8, 2 * 16), \"Crash\": Exit While\n        If y = g(x - 1) - 1 And y = g(x + 1) - 1 Then _PrintString (46 * 8, 2 * 16), \"Landed\": Exit While\n        kh& = _KeyHit\n        If kh& = 19200 Or kh& = 97 Then dx = dx - 1\n        If kh& = 19712 Or kh& = 100 Then dx = dx + 1\n        If kh& = 18432 Or kh& = 119 Then y = y - 5\n        x = x + dx: y = y + 1\n        _Limit 2\n    Wend\n    _Delay 2\nLoop\n' 2020-11-15 fix off-sides x, add alternate keys: a=left d=right w=up  so now arrow keys or WAD system works"
  },
  {
    "input": "Flower Wheel",
    "output": "_Title \"Flower Wheel\" ' b+ 2022-04?\nScreen 12\nDim o\nDo\n    Cls\n    o = o + _Pi / 180\n    drawc _Width / 2, _Height / 2, _Width / 5, .25, 4, o\n    _Display\n    _Limit 30\nLoop\n\nSub drawc (x, y, r, a, n, o)\n    Dim t, xx, yy\n    If n > 0 Then\n        For t = 0 To _Pi(2) Step _Pi(1 / 3)\n            xx = x + r * Cos(t + o)\n            yy = y + r * Sin(t + o)\n            Circle (xx, yy), r\n            drawc xx, yy, a * r, a, n - 1, -o - n * _Pi / 180\n        Next\n    End If\nEnd Sub"
  },
  {
    "input": "Can we find speeds for disks going in  orbits around center st they form patterns?",
    "output": "_Title \"Orbit Patterns\" 'b+ started 2020-02-25\n'can we find speeds for disks going in  orbits around center st they form patterns\n\nConst xmax = 700, ymax = 700, center = 350, P1 = _Pi, P2 = P1 * 2, PD2 = P1 * .5\nDim a, i, x, y, r\nScreen _NewImage(xmax, ymax, 32)\n_ScreenMove 300, 20\nDim rate(1 To 20)\nFor i = 1 To 20\n    rate(i) = (21 - i) / 12\nNext\nWhile _KeyDown(27) = 0\n    Cls\n    For r = 10 To 200 Step 10\n        Circle (center, center), r\n        i = Int(r / 10)\n        x = center + r * Cos(rate(i) * a)\n        y = center + r * Sin(rate(i) * a)\n        Circle (x, y), 5\n    Next\n    a = a + _Pi(2 / 120)\n    _Display\n    _Limit 30\nWend"
  }
]
