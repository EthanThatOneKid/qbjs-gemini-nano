[
  {
    "input": "A simple drawing program in only 14 lines",
    "output": "Dim drawing As Integer\nDo\n    If _MouseButton(1) Then\n        If Not drawing Then\n            PSet (_MouseX, _MouseY)\n            drawing = -1\n        Else\n            Line -(_MouseX, _MouseY)\n        End If\n    Else \n        drawing = 0\n    End If\n    _Limit 30\nLoop"
  },
  {
    "input": "Fractal Fern",
    "output": "Screen 12\nRandomize Timer\nColor _RGB(Rnd * 255, Rnd * 255, Rnd * 255)\nDim As Single X, Y, xx, yy\nDim as Integer n, i\nFor i = 1 TO 100000\n    n = RND * 100\n    If n < 1 Then\n        Xp = 0\n        Yp = .16 * Y\n    ElseIf n >= 1 And n <= 8 Then\n        Xp = .2 * X - .26 * Y\n        Yp = .23 * X + .22 * Y + 1.6\n    ElseIf n >= 8 And n <= 15 Then\n        Xp = -.15 * X + .28 * Y\n        Yp = .26 * X + .24 * Y + .44\n    Else\n        Xp = .85 * X + .04 * Y\n        Yp = -.04 * X + .85 * Y + 1.6\n    End If\n    X = Xp\n    Y = Yp\n    xx = X * 45\n    yy = Y * 45 - 225\n    PSet (xx + 320, -yy + 240)\nNext i"
  },
  {
    "input": "Rotating Lorenz Attractor",
    "output": "Screen _NewImage(640, 480, 32)\nDim As Double p, s, b, h, x, y, z, i, rot\np = 28\ns = 10\nb = 8 / 3\nh = 0.01\n\nDo\n    Cls\n    rot = rot + 0.01\n    x = 0.3\n    y = 0.3\n    z = 0.456\n    xx = x * Cos(rot) - y * Sin(rot)\n    yy = x * Sin(rot) + y * Cos(rot)\n            \n    PreSet (_Width / 2 + 35 * xx * 700 / (yy + 2500), _Height - 35 * z * 700 / (yy + 2500)), _RGB(255, 255, 0)\n    For i = 0 To 14000\n        x = x + h * s * (y - x)\n        y = y + h * (x * (p - z) - y)\n        z = z + h * (x * y - b * z)\n        xx = x * Cos(rot) - y * Sin(rot)\n        yy = x * Sin(rot) + y * Cos(rot)\n        Line -(_Width / 2 + 35 * xx * 700 / (yy + 2500), _Height - 35 * z * 700 / (yy + 2500)), _RGB(255, 255, 0)\n    Next\n\n    _Limit 60\nLoop"
  },
  {
    "input": "Bubble Universe",
    "output": "Const xmax = 512, ymax = 512\n_Title \"Bubble Universe - ESC to exit\" ' from johnno at RCBasic forum 2022-11-14\nScreen _NewImage(xmax, ymax, 32)\n' ---------------\n' Paul Dunn posted this code but for SpecBAS in a facebook group.\n' It looked so cool that I had to  rewrite it in Naalaa 7. Marcus\n'\n' bplus QB64 Mod of RCB version by Johnno56\nTAU = 6.283185307179586\nn = 200\nr = TAU / 235\nx = 0\ny = 0\nv = 0\nt = 0\nhw = xmax / 2\nhh = ymax / 2\nDo\n    Color _RGB32(0, 0, 0)\n    Cls\n    For i = 0 To n\n        For j = 0 To n\n            u = Sin(i + v) + Sin(r * i + x)\n            v = Cos(i + v) + Cos(r * i + x)\n            x = u + t\n            Color _RGB(i, j, 99)\n            PSet (hw + u * hw * 0.4, hh + v * hh * 0.4)\n        Next\n    Next\n    t = t + 0.001 ' slowed way way down from .025\n    _Display\n    _Limit 30\nLoop Until _KeyDown(27)\n"
  },
  {
    "input": "Loads a standard web font for display.",
    "output": "Import Gfx From \"lib/graphics/2d.bas\"\n\nDim f As Long\nf = _LoadFont(\"Arial, Helvetica, sans-serif\", 60)\n_Font f\n\nDim img As Long\nimg = _NewImage(_PrintWidth(\"Hello World!\"), _FontHeight)\n_Dest img\nColor 15\n_PrintMode _KeepBackground\n_PrintString (0, 0), \"Hello World!\"\n_Dest 0\n\nDim As Integer a, x, y\nx = _Width / 2\ny = _Height / 2\nDo\n    Line (1, 1)-(_Width, _Height), _RGBA(0, 0, 0, 70), BF\n    Gfx.RotoZoom x, y, img, 1, 1, a\n    a = a + 3\n    If a > 359 Then a = 0\n    _Limit 60\nLoop"
  },
  {
    "input": "Loads a web font from a URL.",
    "output": "Import Dom From \"lib/web/dom.bas\"\n\nDim f\nf = _LoadFont(\"https://fonts.gstatic.com/s/indieflower/v17/m8JVjfNVeKWVnh3QMuKkFcZVaUuH.woff2\", 24)\n_Font f\n\nCls , 15\nColor 8\n_PrintMode _KeepBackground\n\nPrint \nPrint \"  Day 27:\"\nPrint \"  I am still trapped on the island with no hope of escape.\"\nPrint \"  I struggle against despair, but the realization that I will\"\nPrint \"  never leave this place haunts my every waking thought...\"\nPrint\nPrint \"  I saw the parrot again today.\""
  },
  {
    "input": "Demonstration of the QBJS Console Library",
    "output": "Import Console From \"lib/web/console.bas\"\n\n' You can change the log level to affect which messages\n' will be displayed. The available log levels are:\n' NONE, FATAL, ERROR, WARN, INFO, DEBUG, TRACE, ALL\nConsole.LogLevel Console.DEBUG\n\nConsole.Log \"This is an info message.\"\nConsole.Log \"This is a trace message, it will be ignored.\", Console.TRACE\nDoStuff\n\nConsole.Echo \"And thus concludes the exhilarating demonstration of the QBJS Console library.\"\n\n\nSub DoStuff\n    Console.Log \"Before Doing Stuff\", Console.DEBUG\n    Print \"foo\"\n    uh oh here is an error line\n    Exit Sub\n    Console.Log \"wonder why we never get here?\", Console.Debug\nEnd Sub"
  },
  {
    "input": "Demonstration of the QBJS 2D Graphics Library",
    "output": "Import G2D From \"lib/graphics/2d.bas\"\n\nCls , 15\nG2D.RoundRect 10, 10, 200, 200, 5, 9\nG2D.Ellipse 110, 110, 50, 30, 0, 2\n\nG2D.Shadow 0, 7, 7, 10\nG2D.FillRoundRect 300, 10, 200, 75, 15, 3\nG2D.FillCircle 50, 50, 30, 4\nG2D.ShadowOff\n\nG2D.FillEllipse 320, 320, 60, 40, 15, 5\n\nG2D.Shadow 5, 0, 0, 15\nLine (350, 150)-(450, 250), 0, BF\nG2D.FillTriangle 500, 300, 580, 300, 530, 380, 1\nG2D.ShadowOff\n\nG2D.LineWidth 6\nG2D.LineDash 12, 4\nLine (20, 300)-(200, 380), 0, B\nG2D.LineDashOff\n\nG2D.LineWidth 15\nLine (20, 240)-(200, 240), 4\nG2D.LineCap G2D.ROUND\nLine (20, 260)-(200, 260), 4\nG2D.LineCap G2D.SQUARE\nLine (20, 280)-(200, 280), 4\n\nG2D.LineWidth 25\nG2D.LineCap G2D.ROUND\nG2D.Curve 470, 120, 650, 100, 520, 250, 2\n\nG2D.Shadow 0, 7, 7, 10\nG2D.LineWidth 3\nG2D.Bezier 260, 20, 200, 100, 310, 150, 260, 250, 1\nG2D.ShadowOff"
  },
  {
    "input": "Easy Spiral",
    "output": "Import Gfx From \"lib/graphics/2d.bas\"\n\n_Title \"Easy Spiral\" 'b+ 2022-04? from Easy Lang site very Interesting!  https://easylang.online\n' this one inspired Johnno to post at RCBasic,  https://rcbasic.freeforums.net  , also an interesting site!\nScreen _NewImage(700, 700, 32)\n\nDim tick, pi, s, c, h, x, y\npi = _Pi: s = 7\nDo\n    Cls\n    For c = 1 To 3000 '1320\n        h = c + tick\n        x = Sin(6 * h / pi) + Sin(3 * h)\n        h = c + tick * 2\n        y = Cos(6 * h / pi) + Cos(3 * h)\n        Gfx.FillCircle s * (20 * x + 50), s * (20 * y + 50), 2, &HFFFFFFFF\n    Next\n    _Display\n    _Limit 60\n    tick = tick + .001\nLoop Until _KeyDown(27)\n"
  },
  {
    "input": "Fun with Sin Waves",
    "output": "dim w, h, pi\npi = 4*atn(1)\nw = 640\nh = 480\nscreen _newimage(w, h, 32)\ndim i, t, x, y\nt = 0\ndo\n    t = t+0.1\n    cls\n    for i=1 to 4\n        for x=0 to w\n            y = 100*sin(pi*x/w)*sin(3*pi*x/w + t + i*t*pi*0.01)\n            pset (x, h/2 - y)\n        next\n    next\n    _limit 60\nloop"
  },
  {
    "input": "The Hypotrochoid Show",
    "output": "Import Gfx From \"lib/graphics/2d.bas\"\n_Title \"The Hypotrochoid Show\" 'for QB64 B+ 2019-07-18\nConst xmax = 700, ymax = 700\nScreen _NewImage(xmax, ymax, 32)\nDim As _Unsigned Long c2\nDim xc, yc, r, st, n, m, a, xReturn, yreturn\nc2~& = &HFFBB0000\nxc = xmax / 2: yc = ymax / 2: r = yc * .5: st = 1 / (2 * _Pi * r)\nn = 0: m = 3\nWhile _KeyDown(27) = 0\n    m = m + 1\n    For n = 5 To 30 Step .05\n        Cls\n        For a = 0 To 2 * _Pi Step st\n            xReturn = xc + r * (Cos(a) + Cos(n * a) / 3 + Sin(m * a) / 2)\n            yreturn = yc + r * (Sin(a) + Sin(n * a) / 3 + Cos(m * a) / 2)\n            Gfx.FillCircle xReturn, yReturn, 10, _RGB32(0, 200, 0, n)\n            Gfx.FillCircle xReturn, yReturn, 4, c2~&\n        Next\n        Print \"m = \"; m; \"  n = \"; n\n        _Display\n        _limit 100\n    Next\nWend\n"
  },
  {
    "input": "Fullscreen Example",
    "output": "If Not _FullScreen Then _FullScreen\n\nPrint \"This is a fullscreen test\"\nPrint \"It only works if your browser supports it\"\nPrint\nPrint \"Click anywhere to draw a circle\"\nPrint \"Press any key to quit\"\n\n\nCircle (200, 200), 100, 10\nPaint (200, 200), 1, 10\n\nDim drawing As Integer\ndrawing = 0\n\nWhile Not _KeyHIt\n    If _MouseButton(1) Then\n        If Not drawing Then\n            drawing = -1\n            Circle (_MouseX, _MouseY), Rnd * 30 + 10, Rnd * 14 + 1\n        End If\n    Else\n        drawing = 0\n        End If\n    _Limit 30\nWend\n\nIf _FullScreen Then\n    Locate 24, 1\n    Print \"Press any key to exit fullscreen\"\n    Sleep\n    _FullScreen _OFF\nEnd If"
  },
  {
    "input": "Flower Wheel",
    "output": "_Title \"Flower Wheel\" ' b+ 2022-04?\nScreen 12\nDim o\nDo\n    Cls\n    o = o + _Pi / 180\n    drawc _Width / 2, _Height / 2, _Width / 5, .25, 4, o\n    _Display\n    _Limit 30\nLoop\n\nSub drawc (x, y, r, a, n, o)\n    Dim t, xx, yy\n    If n > 0 Then\n        For t = 0 To _Pi(2) Step _Pi(1 / 3)\n            xx = x + r * Cos(t + o)\n            yy = y + r * Sin(t + o)\n            Circle (xx, yy), r\n            drawc xx, yy, a * r, a, n - 1, -o - n * _Pi / 180\n        Next\n    End If\nEnd Sub"
  },
  {
    "input": "Can we find speeds for disks going in  orbits around center st they form patterns?",
    "output": "_Title \"Orbit Patterns\" 'b+ started 2020-02-25\n'can we find speeds for disks going in  orbits around center st they form patterns\n\nConst xmax = 700, ymax = 700, center = 350, P1 = _Pi, P2 = P1 * 2, PD2 = P1 * .5\nDim a, i, x, y, r\nScreen _NewImage(xmax, ymax, 32)\n_ScreenMove 300, 20\nDim rate(1 To 20)\nFor i = 1 To 20\n    rate(i) = (21 - i) / 12\nNext\nWhile _KeyDown(27) = 0\n    Cls\n    For r = 10 To 200 Step 10\n        Circle (center, center), r\n        i = Int(r / 10)\n        x = center + r * Cos(rate(i) * a)\n        y = center + r * Sin(rate(i) * a)\n        Circle (x, y), 5\n    Next\n    a = a + _Pi(2 / 120)\n    _Display\n    _Limit 30\nWend"
  },
  {
    "input": "Cardioid and Beyond",
    "output": "_Title \"Cardioid and Beyond\" 'B+ 2019-02-17\nConst xmax = 700\nConst ymax = 700\nConst npoints = 200\nScreen _NewImage(xmax, ymax, 32)\nDim Shared pR, pG, pB, cN\nCX = xmax / 2\nCY = ymax / 2\nDA = _Pi(2 / npoints)\nR = CX - 10\n\nFor Mult = 0 To 100 Step .01\n    Cls\n    Color &HFFFFFFFF\n    Print \"Multiple: \";\n    'Print Using \"###.##\"; Mult\n    Print _Round(Mult*100)/100\n    If Mult = Int(Mult) Then resetPlasma\n    Circle (CX, CY), R, _RGB32(0, 128, 0)\n    For i = 1 To 200\n        x1 = CX + R * Cos(i * DA)\n        y1 = CY + R * Sin(i * DA)\n        x2 = CX + R * Cos(Mult * i * DA)\n        y2 = CY + R * Sin(Mult * i * DA)\n        changePlasma\n        Line (x1, y1)-(x2, y2)\n    Next\n    _Display\n    _Limit 30\nNext\n\nSub changePlasma ()\n    cN = cN + 1\n    Color _RGB(127 + 127 * Sin(pR * cN), 127 + 127 * Sin(pG * cN), 127 + 127 * Sin(pB * cN))\nEnd Sub\n\nSub resetPlasma ()\n    pR = Rnd ^ 2: pG = Rnd ^ 2: pB = Rnd ^ 2\nEnd Sub"
  },
  {
    "input": "Hypno Mezmerizing Thingamajig",
    "output": "'LittleProggieForB+.bas\n'By Dav, SEP/2023\n\nScreen _NewImage(800, 600, 32)\ndim w2, h2, x, w, n, t '<-- for QBJS to use\nw2 = _Width / 2: h2 = _Height / 2\nDo\n    For x = 0 To _Width Step 5\n        For y = 0 To _Height Step 5\n            n = Abs(Sin((Sqr(((x - w2) / w2) ^ 2 + ((y - h2) / h2) ^ 2) + t) * t) * 200)\n            Line (x, y)-Step(5, 5), _RGBA(Rnd * n, n, 200, 200), BF\n        Next\n    Next: t = t + (Rnd * 10 - Rnd * 20)\n    _Limit 15\n    _Display\nLoop"
  },
  {
    "input": "Sine Wave Water",
    "output": "'sinwavewater.bas\n'Dav, AUG/2024\n \nScreen _NewImage(800, 600, 32)\n \nDo\n    Cls\n    For waves = 1 To 10\n        For x = 0 To _Width\n            'choose of two ways to float\n            If waves Mod 2 Then\n                y = (60 * waves) + (2 + waves) * Sin(x / (15 + waves) - Timer * waves)\n            Else\n                y = (60 * waves) + (2 + waves) * Sin(x / (15 + waves) + Timer * waves)\n            End If\n            Line (x, _Height)-(x, y), _RGB(waves, waves, 25 * waves)\n        Next\n    Next\n    _Limit 30\n    _Display\nLoop Until InKey$ <> \"\"\n"
  },
  {
    "input": "Damesh",
    "output": "Randomize Timer ' damesh.bas Danilin from Russia\nScreen 12 ' 1! 2 3? 4 5! 6 7? 8 9!\nn=8: u=256: Dim x(n,9),y(n,9)\n\nFor i=1 To n\n    x(i,1)=Int(Rnd*u+3): y(i,1)=Int(Rnd*u+3)\n    x(i,9)=Int(Rnd*u+3): y(i,9)=Int(Rnd*u+3)\nNext\n\nData -5,1,9,-3,1,5,-2,1,3,-4,3,5,-7,5,9,-6,5,7,-8,7,9\n\nFor g=1 To 9 - 2: Read d,a,v\n    For i=1 To n: x(i,-d)=(x(i,a) +x(i,v))/2: y(i,-d)=(y(i,a) +y(i,v))/2: Next\nNext\n\nFor g=1 To 10: For k=1 To 9: _Delay .1: Cls\n    For i=1 To n: For j=1 To n: Circle (x(i,k),y(i,k)),2: Next: Next\n\n        For i=1 To n - 1: For j=i To n\n            Line (x(i,k),y(i,k))-(x(j,k),y(j,k)),i\n           'Line (x(i,k),y(i,k))-(x(i+1,k),y(i+1,k)),i\n    Next: Next: Next\n\n    For k=8 To 2 Step -1: _Delay .1: Cls\n\nFor p=1 To 9\n    For i=1 To n: For j=1 To n: Circle (x(i,p),y(i,p)),2,i: Next: Next\nNext\n    For i=1 To n - 1: For j=i To n\n       Line (x(i,k),y(i,k))-(x(j,k),y(j,k)),i\n      'Line (x(i,k),y(i,k))-(x(i+1,k),y(i+1,k)),i\n    Next: Next: Next\nNext"
  },
  {
    "input": "Relief 3D",
    "output": "N = 200:q = 15: SCREEN 12: DIM a(q + 1, N)'relup.bas 5d relief up\nFOR x = 1 TO q: FOR y = 1 TO N - 5\n        IF INT(RND * 100) MOD 7 = 5 THEN\n            a(x, y) = 5: a(x, y + 1) = 10: a(x, y + 2) = 20: a(x, y + 3) = 40: a(x, y + 4) = 80: y = y + 5\n        END IF\nNEXT: NEXT\nFOR t = 1 TO N-q\n    FOR i = 1 TO q-1: FOR j = 1 TO q-1: a(i, j) = a(i, j + t): NEXT: NEXT: CLS\n \n    FOR y = 1 TO q-1: FOR x = 1 TO q-2\n            LINE (30 + 20 * x + 20 * y, 400-20 * y - a(x, y))-(30 + 20 * (x + 1) + 20 * y, 400 - 20 * y - a(x + 1, y)), (y + t MOD 7) + 1\n    NEXT: NEXT\n \n    FOR x = 1 TO q-1: FOR y = 1 TO q-2\n            LINE (30 + 20 * x + 20 * y, 400 - 20 * y - a(x, y))-(30 + 20 * (x + 1) + 20 * y, 400 - 20 * (y + 1) - a(x, y + 1)), 7\nNEXT: NEXT: _DELAY 0.2: NEXT\nEND"
  },
  {
    "input": "Xonix",
    "output": "Randomize Timer: ' xonixdig.bas Danilin Russia \nb = Int(Rnd*10+15): a = Int(Rnd*10+15): ' _Font 17 \nN = Int(Rnd*3+5): Dim dx(N), dy(N), y(N), x(N), c(N) \n\nFor i = 1 To N\n    dx(i) = 1+Int(Rnd-.5)*2\n    dy(i) = 1+Int(Rnd-.5)*2\n    y(i) = Int(Rnd*(b-3)+2): x(i) = Int(Rnd*(a-3)+2)\n    c(i) = Int(Rnd*5+1)\nNext\n\nFor i = 1 To a: Print \"#\";: Next: Print ' area\nFor j = 1 To b-2: Print \"#\";: For k = 1 To a-2: Print \".\";: Next: Print \"#\": Next\nFor i = 1 To a: Print \"#\";: Next\n\nFor q = 1 To 1000: _Delay .08\n    For i = 1 To N: Locate y(i), x(i): Print \"  \"\n\n        If y(i)+dy(i) < 2 Or y(i)+dy(i) > b-1 Then dy(i) = -dy(i)\n        y(i) = y(i)+dy(i)\n        If x(i)+dx(i) < 2 Or x(i)+dx(i) > a-3 Then dx(i) = -dx(i)\n        x(i) = x(i)+dx(i)\n\n        For k = 1 To N-1: For m = k+1 To N\n            If y(k) = y(m) And x(k) = x(m) Then c(k) = Int(Rnd*5+1): c(m) = Int(Rnd*5+1)\n        Next: Next\n        Locate y(i), x(i): Color c(i): Print c(i)\nNext: Next\n"
  },
  {
    "input": "Sin Waves",
    "output": " \nDim w, h\nw = 640\nh = 640\nScreen _NewImage(w, h, 32)\n_ScreenMove 340, 60\nDim i, t, x, y\nDo\n    t = t + 0.01\n    Line (0, 0)-(w, h), _RGBA(0, 0, 0, 25), BF\n    For i = 1 To 8\n        Color _RGBA(i * 32, i * 32 * .7, 0, i * 32)\n        For x = 0 To w\n            y = 100 * Sin(_Pi * x / w) * Sin(1 * _Pi * x / w + t + i * t * _Pi * 0.1)\n            Circle (x, h / 2 + y), i\n            Circle (w / 2 + y, x), i\n        Next\n    Next\n    _Display\n    _Limit 30\nLoop\n"
  },
  {
    "input": "Fake Voronoi Plasma",
    "output": "'fake-voronoi-plasma.bas\n'Dav, OCT/2023\nScreen _NewImage(800, 600, 32)\nDo\n    For x = 0 To _Width Step 2\n        For y = 0 To _Height Step 2\n            d = Sqr(((x - y) ^ 2) + t + ((y - x) ^ 2) + t)\n            Line (x, y)-Step(2, 2), _RGBA((d + x + t) Mod 255, (d + y + t) Mod 255, (d + t) Mod 255, 10), BF\n        Next\n    Next\n    t = t + 1\n    _Limit 30\nLoop Until InKey$ = Chr$(27)\n"
  }
]
